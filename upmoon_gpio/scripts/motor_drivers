#!/usr/bin/env python3

from upmoon_gpio import TrinamicsMotor, Stepper, PWM, DCBrushed
from std_msgs.msg import Float64
import rospy
import RPi.GPIO as GPIO

class MotorDriver:
    
    def __init__(self, rate: rospy.Rate):
        self.rate = rate
        self.motors = []

        self.create_drivetrain()
        self.create_articulators()
        self.create_excavator()
        self.create_depositor()

        rospy.loginfo("Inititalized motor driver")

        for motor in self.motors:
            motor.start()


    def create_drivetrain(self):
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_lf_joint", sleep_rate=self.rate, motor_id=1, reverse_dir=True))
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_lm_joint", sleep_rate=self.rate, motor_id=7, reverse_dir=True))
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_lb_joint", sleep_rate=self.rate, motor_id=4, reverse_dir=True))
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_rf_joint", sleep_rate=self.rate, motor_id=3))
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_rm_joint", sleep_rate=self.rate, motor_id=5))
        self.motors.append(TrinamicsMotor(topic="/motor/wheel_rb_joint", sleep_rate=self.rate, motor_id=6))


    def create_articulators(self):
        self.motors.append(Stepper(topic="/motor/ankle_lf_joint", encoder_topic="/encoder/lf_ankle", disable_pin=21, dir_pin=2, step_pin=3, sleep_rate=self.rate))
        #self.motors.append(Stepper(topic="/motor/ankle_lm_joint", disable_pin=21, dir_pin=4, step_pin=17, sleep_rate=self.rate)) # removed motor
        self.motors.append(Stepper(topic="/motor/ankle_lb_joint", encoder_topic="/encoder/lb_ankle", disable_pin=21, dir_pin=27, step_pin=5, sleep_rate=self.rate))
        self.motors.append(Stepper(topic="/motor/ankle_rf_joint", encoder_topic="/encoder/rf_ankle", disable_pin=21, dir_pin=6, step_pin=13, sleep_rate=self.rate))
        #self.motors.append(Stepper(topic="/motor/ankle_rm_joint", disable_pin=21, dir_pin=19, step_pin=26, sleep_rate=self.rate)) # removed motor
        self.motors.append(Stepper(topic="/motor/ankle_rb_joint", encoder_topic="/encoder/rb_ankle", disable_pin=21, dir_pin=18, step_pin=23, sleep_rate=self.rate))


    def create_excavator(self):
        self.motors.append(DCBrushed(topic='/motor/dig_spin', address=128, motor_num=1, sleep_rate=self.rate))
        self.motors.append(PWM(topic='/motor/dig_angle_joint', pin=16, freq=50, min_dc=0, max_dc=100, init_range=0, sleep_rate=self.rate))


    def create_depositor(self):
        self.motors.append(PWM(topic='/motor/depositor_actuator', pin=20, freq=50, min_dc=0, max_dc=100, init_range=0, sleep_rate=self.rate))

        # Depositor linear actuators - Plan A 
        self.motors.append(DCBrushed(topic='/motor/depositor_lift', address=128, motor_num=2, sleep_rate=self.rate, max_power=57.1))

        # Depositor linear actuators - Plan B
        # Comment out Plan A and uncomment Plan B if we cannot run the two motors on the same motor controller.
        # Note: A sabertooth has two motor controllers.
        # Uncomment the lines below.
        # dep_lift_a = DCBrushed(topic='/motor/depositor_lift_a', address=129, motor_num=1, sleep_rate=self.rate, max_power=57.1)
        # dep_lift_b = DCBrushed(topic='/motor/depositor_lift_b', address=129, motor_num=2, sleep_rate=self.rate, max_power=57.1)
        # self.motors.append(dep_lift_a)
        # self.motors.append(dep_lift_b)

        # def depositor_lift_cb(data: Float64):
        #     dep_lift_a.drive(data.data)
        #     dep_lift_b.drive(data.data)

        # rospy.Subscriber('/motor/depositor_lift', Float64, depositor_lift_cb)


if __name__ == '__main__':
    rospy.init_node('motor_driver')

    md = MotorDriver(rospy.Rate(300))

    rospy.spin()

    GPIO.cleanup()
