#!/usr/bin/env python3

from upmoon_gpio import MotorListener, TrinamicsMotor, Stepper, PWM, DCBrushed
import rospy

class MotorDriver:
    
    def __init__(self):
        self.motors = []

        # self.create_drivetrain()
        # self.create_articulators()
        # self.create_excavator()
        # self.create_excavator()
        self.motors.append(Stepper(topic="/motor/ankle/lf", disable_pin=0, dir_pin=27, step_pin=17, delay=0.50, revs_per_turn=1))

        rospy.loginfo("Inititalized motor driver")

        self.run()


    def create_drivetrain(self):
        self.motors.append(TrinamicsMotor(topic="/motor/drive/lf", motor_id=1))
        self.motors.append(TrinamicsMotor(topic="/motor/drive/lm", motor_id=2))
        self.motors.append(TrinamicsMotor(topic="/motor/drive/lb", motor_id=3))
        self.motors.append(TrinamicsMotor(topic="/motor/drive/rf", motor_id=4))
        self.motors.append(TrinamicsMotor(topic="/motor/drive/rm", motor_id=5))
        self.motors.append(TrinamicsMotor(topic="/motor/drive/rb", motor_id=6))


    def create_articulators(self):
        self.motors.append(Stepper(topic="/motor/ankle/lf", disable_pin=0, dir_pin=1, step_pin=2))
        self.motors.append(Stepper(topic="/motor/ankle/lm", disable_pin=0, dir_pin=1, step_pin=2))
        self.motors.append(Stepper(topic="/motor/ankle/lb", disable_pin=0, dir_pin=1, step_pin=2))
        self.motors.append(Stepper(topic="/motor/ankle/rf", disable_pin=0, dir_pin=1, step_pin=2))
        self.motors.append(Stepper(topic="/motor/ankle/rm", disable_pin=0, dir_pin=1, step_pin=2))
        self.motors.append(Stepper(topic="/motor/ankle/rb", disable_pin=0, dir_pin=1, step_pin=2))


    def create_excavator(self):
        self.motors.append(DCBrushed(topic='/motor/excavate/spin', address=128, motor_num=1))
        self.motors.append(PWM(topic='/motor/excavate/actuator', pin=0, freq=50, min_dc=0, max_dc=100, init_range=0))


    def create_depositor(self):
        self.motors.append(PWM(topic='/motor/depositor/actuator', pin=0, freq=50, min_dc=0, max_dc=100, init_range=0))


    def run(self):
        while not rospy.is_shutdown():
            for motor in self.motors:
                motor.run()


if __name__ == '__main__':
    rospy.init_node('motor_driver')

    md = MotorDriver()

